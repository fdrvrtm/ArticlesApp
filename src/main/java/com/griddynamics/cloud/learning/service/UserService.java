package com.griddynamics.cloud.learning.service;

import com.griddynamics.cloud.learning.dao.Permission;
import com.griddynamics.cloud.learning.dao.domain.Role;
import com.griddynamics.cloud.learning.dao.domain.User;
import com.griddynamics.cloud.learning.dao.repository.RoleRepository;
import com.griddynamics.cloud.learning.dao.repository.UserRepository;
import com.griddynamics.cloud.learning.web.dto.NewUserDto;
import com.griddynamics.cloud.learning.web.dto.UserWithRolesDto;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.EnumSet;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

@Service
public class UserService {

    private static final String AUTOGENERATED_USER = "AUTOGENERATED USER";

    private UserRepository userRepository;

    private RoleRepository roleRepository;

    private PasswordEncoder encoder;

    public UserService(UserRepository userRepository, RoleRepository roleRepository, PasswordEncoder encoder) {
        this.userRepository = userRepository;
        this.roleRepository = roleRepository;
        this.encoder = encoder;
    }

    public UserWithRolesDto saveUser(NewUserDto userToSaveDto) {
        return save(userToSaveDto, EnumSet.of(Permission.PURCHASE_ARTICLE));
    }

    private UserWithRolesDto save(NewUserDto user, EnumSet<Permission> permissions) {

        Optional<Role> existingRole = StreamSupport.stream(roleRepository.findAll().spliterator(), false)
                .filter(Objects::nonNull)
                .filter(r -> permissions.equals(r.getPermissions()))
                .findFirst();

        Role userRole = existingRole.orElseGet(() -> createUserRole(permissions));

        User newUser = User.builder()
                .email(user.getEmail())
                .username(user.getUsername())
                .password(encoder.encode(user.getPassword()))
                .role(userRole)
                .build();

        final User savedUser = userRepository.save(newUser);
        return convert(savedUser);
    }

    private Role createUserRole(EnumSet<Permission> permissions) {
        return Role.builder()
                .name(AUTOGENERATED_USER)
                .permissions(permissions)
                .build();
    }

    private UserWithRolesDto convert(User user) {
        Set<String> permissions = user.getRole().getPermissions().stream()
                .map(Enum::toString)
                .collect(Collectors.toSet());

        return UserWithRolesDto.builder()
                .id(user.getId())
                .username(user.getUsername())
                .email(user.getEmail())
                .permissions(permissions)
                .build();
    }
}
